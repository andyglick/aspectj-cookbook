package com.oreilly.aspectjcookbook.feature_management;import org.aspectj.lang.JoinPoint;import com.oreilly.aspectjcookbook.lazyloading.LazyLoading;       import com.oreilly.aspectjcookbook.lazyloading.LazyLoadingException;import com.oreilly.aspectjcookbook.features.Feature;public aspect LazyFeatureLoading extends LazyLoading{   public LazyProxy initializeComponent(Object object)   {      LazyProxy proxy =         new LazyFeatureProxy((String) object);      return proxy;   }      protected pointcut requestTriggered() :       call(* com.oreilly.aspectjcookbook.features.Feature.* (..)) &&      !within(com.oreilly.aspectjcookbook.oopatterns.ProxyPattern+);      protected Object delegateRequest(      Object caller,      Subject subject,      JoinPoint joinPoint)   {      if (subject instanceof LazyFeatureProxy)      {         LazyFeatureProxy feature =            (LazyFeatureProxy) subject;                  try         {            Feature implementedFeature =               (Feature) feature.getRealComponent();                        implementedFeature.doSomething(                  (String) joinPoint.getArgs()[0]);                     }         catch (LazyLoadingException lle)         {            lle.printStackTrace();            lle.getOriginalException().printStackTrace();            System.out.println(                  "Exception when attempting to "                  + "lazy load"                  + " a particular class,"                  + " aborting the call");         }      }      else      {                  ((Feature) subject).doSomething(               (String) joinPoint.getArgs()[0]);      }      return null;   }      declare parents : Feature implements RealComponent;      declare parents : LazyProxy implements Feature;      private class LazyFeatureProxy implements Feature, LazyProxy   {      private Object configuration;      private Feature delegate;      public LazyFeatureProxy(Object configuration)      {         this.configuration = configuration;      }            public synchronized RealComponent getRealComponent()         throws LazyLoadingException      {         if (this.configuration instanceof String)         {            try            {               if (this.delegate == null)               {                  return this.delegate =                     (Feature) Class                     .forName((String) this.configuration)                     .newInstance();               }               else               {                  return this.delegate;               }            }            catch (Exception e)            {               throw new LazyLoadingException("Exception raised when loading real component", e);            }         }         else         {            throw new LazyLoadingException("Error in configuration");         }      }            public void doSomething(String message)      {      }   }}